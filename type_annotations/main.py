# type annotations 

def greet(name: str) -> str:
    return f"Hello, {name}!"

def add(a: int, b: int) -> int:
    return a + b

if __name__ == "__main__":
    print(greet("Alice"))
    print(add(5.1, 3.0)) # Esto no falla en tiempo de ejecuci√≥n, pero mypy o pyright lo marcar√≠an como error.
    
#üß† Si este c√≥digo no falla, entonces‚Ä¶ ¬øpara qu√© sirven las anotaciones?
    # Sirven para:
    # Herramientas de an√°lisis est√°tico como mypy, pyright, o los chequeos de tipo de VS Code.
    # Mejor autocompletado y documentaci√≥n en IDEs.
    # Evitar errores antes de ejecutar el c√≥digo.

from fastapi import FastAPI

app = FastAPI()

@app.get("/add")
def add(a: int, b: int):
    return {"result": a + b}

# Prueba con:
# GET /add?a=5&b=3
{"result": 8}

# Pero si pruebas con:
# GET /add?a=5.1&b=3.0

{
  "detail": [
    {
      "loc": ["query", "a"],
      "msg": "value is not a valid integer",
      "type": "type_error.integer"
    }
  ]
}

# ‚öôÔ∏è ¬øPor qu√© aqu√≠ s√≠ falla?
# Porque FastAPI usa Pydantic (y en las versiones m√°s recientes, Pydantic v2) para:
# Validar los tipos de entrada (query params, body, path params‚Ä¶).
# Convertir datos autom√°ticamente (por ejemplo, strings a int o float).
# Generar errores si el tipo no coincide.
# En otras palabras:
# En FastAPI, los tipos se imponen y validan autom√°ticamente en los endpoints, no solo se anotan.
